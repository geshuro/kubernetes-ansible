---
# Nodo Ready: type = ready, status = True
# Nodo NotReady: type = ready, status = Unknown
- name: Revisar si el nodo esta en estado ready
  shell: >-
    {{ bin_dir }}/kubectl get node {{ kube_override_hostname|default(inventory_hostname) }}
    -o jsonpath='{ range .status.conditions[?(@.type == "Ready")].status }{ @ }{ end }'
  register: kubectl_nodo_ready
  delegate_to: "{{ groups['kube-master'][0] }}"
  failed_when: false
  changed_when: false

# SchedulingDisabled: unschedulable = true
# de lo contrario el key unschedulable no existe
- name: Revisar si el nodo es schedulable
  shell: >-
    {{ bin_dir }}/kubectl get node {{ kube_override_hostname|default(inventory_hostname) }}
    -o jsonpath='{ .spec.unschedulable }'
  register: kubectl_nodo_schedulable
  delegate_to: "{{ groups['kube-master'][0] }}"
  failed_when: false
  changed_when: false

- name: Establecer si el nodo necesita uncordon
  set_fact:
    necesita_uncordon: >-
      {% if kubectl_nodo_ready.stdout == "True" and kubectl_nodo_schedulable.stdout -%}
      true
      {%- else -%}
      false
      {%- endif %}

- name: Nodo uncordon
  command: "{{ bin_dir }}/kubectl --kubeconfig /etc/kubernetes/admin.conf uncordon {{ kube_override_hostname|default(inventory_hostname) }}"
  delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - necesita_uncordon|default(false)