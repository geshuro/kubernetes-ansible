---
- name: Preinstall | propagar resolvconf a componentes k8s
  command: /bin/true
  notify:
    - Preinstall | recargar kubelet
    - Preinstall | kube-controller configurado
    - Preinstall | kube-apiserver configurado
    - Preinstall | restart kube-controller-manager docker
    - Preinstall | restart kube-controller-manager crio/containerd
    - Preinstall | restart kube-apiserver docker
    - Preinstall | restart kube-apiserver crio/containerd

- name: Preinstall | actualizar resolvconf para Fedora CoreOS
  command: /bin/true
  notify:
    - Preinstall | recargar NetworkManager
    - Preinstall | recargar kubelet
  when: is_fedora_coreos

- name: Preinstall | recargar NetworkManager
  service:
    name: NetworkManager.service
    state: restarted
  when: is_fedora_coreos

- name: Preinstall | recargar kubelet
  service:
    name: kubelet
    state: restarted
  notify:
    - Preinstall | kube-controller configurado
    - Preinstall | kube-apiserver configurado
    - Preinstall | restart kube-controller-manager docker
    - Preinstall | restart kube-controller-manager crio/containerd
    - Preinstall | restart kube-apiserver docker
    - Preinstall | restart kube-apiserver crio/containerd
  when: not dns_early|bool

# FIXME(mattymo): Also restart for kubeadm mode
- name: Preinstall | kube-apiserver configurado
  stat: path="{{ kube_manifest_dir }}/kube-apiserver.manifest"
  register: kube_apiserver_set
  when: inventory_hostname in groups['kube-master'] and dns_mode != 'none' and resolvconf_mode == 'host_resolvconf'

- name: Preinstall | kube-controller configurado
  stat: path="{{ kube_manifest_dir }}/kube-controller-manager.manifest"
  register: kube_controller_set
  when: inventory_hostname in groups['kube-master'] and dns_mode != 'none' and resolvconf_mode == 'host_resolvconf'

- name: Preinstall | restart kube-controller-manager docker
  shell: "docker ps -f name=k8s_POD_kube-controller-manager* -q | xargs --no-run-if-empty docker rm -f"
  when:
    - container_manager == "docker"
    - inventory_hostname in groups['kube-master']
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - kube_controller_set.stat.exists

- name: Preinstall | restart kube-controller-manager crio/containerd
  shell: crictl pods --name kube-controller-manager* -q | xargs -I% --no-run-if-empty bash -c 'crictl stopp % && crictl rmp %'
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube-master']
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'
    - kube_controller_set.stat.exists

- name: Preinstall | restart kube-apiserver docker
  shell: "docker ps -f name=k8s_POD_kube-apiserver* -q | xargs --no-run-if-empty docker rm -f"
  when:
    - container_manager == "docker"
    - inventory_hostname in groups['kube-master']
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'

- name: Preinstall | restart kube-apiserver crio/containerd
  shell: crictl pods --name kube-apiserver* -q | xargs -I% --no-run-if-empty bash -c 'crictl stopp % && crictl rmp %'
  when:
    - container_manager in ['crio', 'containerd']
    - inventory_hostname in groups['kube-master']
    - dns_mode != 'none'
    - resolvconf_mode == 'host_resolvconf'

- name: Preinstall | Restart systemd-resolved
  service:
    name: systemd-resolved
    state: restarted
