---
- name: Comprobar si es fedora coreos
  stat:
    path: /run/ostree-booted
  register: ostree

- name: Establecer is_ostree
  set_fact:
    is_ostree: "{{ ostree.stat.exists }}"

- name: Recopilar variables específicas del SO
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_release|lower }}-{{ host_architecture }}.yml"
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_release|lower }}.yml"
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution|lower }}-{{ host_architecture }}.yml"
        - "{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ host_architecture }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars
      skip: true
  tags:
    - facts

- name: Advertir sobre la versión de Docker en SUSE
  debug:
    msg: "Las distribuciones de SUSE siempre instalan Docker desde los repositorios de distribución"
  when: ansible_pkg_mgr == 'zypper'

- include_tasks: set_facts_dns.yml
  when: dns_mode != 'none' and resolvconf_mode == 'docker_dns'
  tags:
    - facts

- name: Comprobar la versión mínima del kernel
  fail:
    msg: >
          docker requiere una versión mínima del kernel de
          {{ docker_kernel_min_version }} en
          {{ ansible_distribution }}-{{ ansible_distribution_version }}
  when: ansible_kernel is version(docker_kernel_min_version, "<")
  tags:
    - facts

- name: Deshabilitar unified_cgroup_hierarchy en Fedora 31+
  command: grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"
  when:
    - ansible_distribution == "Fedora"
    - (ansible_distribution_major_version | int) >= 31
    - ansible_proc_cmdline['systemd.unified_cgroup_hierarchy'] is not defined or ansible_proc_cmdline['systemd.unified_cgroup_hierarchy'] != '0'

- name: Reiniciar en Fedora 31+
  reboot:
  when:
    - ansible_distribution == "Fedora"
    - (ansible_distribution_major_version | int) >= 31
    - ansible_proc_cmdline['systemd.unified_cgroup_hierarchy'] is not defined or ansible_proc_cmdline['systemd.unified_cgroup_hierarchy'] != '0'

- import_tasks: pre-upgrade.yml

- name: Asegurar que la clave pública del repositorio de docker-ce esté instalada
  action: "{{ docker_repo_key_info.pkg_key }}"
  args:
    id: "{{ item }}"
    url: "{{ docker_repo_key_info.url }}"
    state: present
  register: keyserver_task_result
  until: keyserver_task_result is succeeded
  retries: 4
  delay: "{{ retry_stagger | d(3) }}"
  with_items: "{{ docker_repo_key_info.repo_keys }}"
  when: not (ansible_os_family in ["RedHat"] or is_ostree)

- name: Asegurar que el repositorio de docker-ce esté habilitado
  action: "{{ docker_repo_info.pkg_repo }}"
  args:
    repo: "{{ item }}"
    state: present
  with_items: "{{ docker_repo_info.repos }}"
  when: not (ansible_os_family in ["RedHat"] or is_ostree) and (docker_repo_info.repos|length > 0)

- name: Asegurar que la clave pública del repositorio de Docker-Engine esté instalada
  action: "{{ dockerproject_repo_key_info.pkg_key }}"
  args:
    id: "{{ item }}"
    url: "{{ dockerproject_repo_key_info.url }}"
    state: present
  register: keyserver_task_result
  until: keyserver_task_result is succeeded
  retries: 4
  delay: "{{ retry_stagger | d(3) }}"
  with_items: "{{ dockerproject_repo_key_info.repo_keys }}"
  when:
    - not (ansible_os_family in ["RedHat"] or is_ostree)
    - use_docker_engine is defined and use_docker_engine

- name: Asegurar que el repositorio de Docker-Engine esté habilitado
  action: "{{ dockerproject_repo_info.pkg_repo }}"
  args:
    repo: "{{ item }}"
    state: present
  with_items: "{{ dockerproject_repo_info.repos }}"
  when:
    - use_docker_engine is defined and use_docker_engine
    - not (ansible_os_family in ["RedHat"] or is_ostree) and (dockerproject_repo_info.repos|length > 0)

- name: Configurar el repositorio de Docker en Fedora
  template:
    src: "fedora_docker.repo.j2"
    dest: "{{ yum_repo_dir }}/docker.repo"
  when: ansible_distribution == "Fedora" and not is_ostree

- name: Configurar el repositorio de Docker en RedHat/CentOS
  template:
    src: "rh_docker.repo.j2"
    dest: "{{ yum_repo_dir }}/docker-ce.repo"
  when: ansible_distribution in ["CentOS","RedHat"] and not is_ostree

- name: Comprobar si container-selinux está disponible
  yum:
    list: "container-selinux"
  register: yum_result
  when: ansible_distribution in ["CentOS","RedHat"] and not is_ostree

- name: Configurar el repositorio de extras en RedHat/CentOS si container-selinux no está disponible en los repositorios actuales
  yum_repository:
    name: extras
    description: "CentOS-7 - Extras"
    state: present
    baseurl: "{{ extras_rh_repo_base_url }}"
    file: "extras"
    gpgcheck: "{{ 'yes' if extras_rh_repo_gpgkey else 'no' }}"
    gpgkey: "{{ extras_rh_repo_gpgkey }}"
    keepcache: "{{ docker_rpm_keepcache | default('1') }}"
    proxy: " {{ http_proxy | default('_none_') }}"
  when:
    - ansible_distribution in ["CentOS","RedHat"] and not is_ostree
    - yum_result.results | length == 0

- name: Copiar yum.conf para editar
  copy:
    src: "{{ yum_conf }}"
    dest: "{{ docker_yum_conf }}"
    remote_src: yes
  when: ansible_distribution in ["CentOS","RedHat"] and not is_ostree

- name: Editar la copia de yum.conf para establecer obsoletes=0
  ini_file:
    path: "{{ docker_yum_conf }}"
    section: main
    option: obsoletes
    value: "0"
    no_extra_spaces: true
  when: ansible_distribution in ["CentOS","RedHat"] and not is_ostree

- name: Asegurar que los paquetes de Docker estén instalados
  action: "{{ docker_package_info.pkg_mgr }}"
  args:
    pkg: "{{ item.name }}"
    force: "{{ item.force|default(omit) }}"
    conf_file: "{{ item.yum_conf|default(omit) }}"
    state: "{{ item.state | default('present') }}"
    update_cache: "{{ omit if ansible_distribution == 'Fedora' else True }}"
  register: docker_task_result
  until: docker_task_result is succeeded
  retries: 4
  delay: "{{ retry_stagger | d(3) }}"
  with_items: "{{ docker_package_info.pkgs }}"
  notify: restart docker
  when: not (is_ostree) and (docker_package_info.pkgs|length > 0)
  ignore_errors: true

- name: Obtener paquetes disponibles en Ubuntu
  command: apt-cache policy docker-ce
  when:
    - docker_task_result is failed
    - ansible_distribution == 'Ubuntu'
  register: available_packages
  check_mode: false

- name: Mostrar paquetes disponibles en ubuntu
  fail:
    msg: "{{ available_packages }}"
  when:
    - docker_task_result is failed
    - ansible_distribution == 'Ubuntu'

# Esto es necesario para garantizar que cualquier actualización de apt no altere kubernetes
- name: Indicar a los hosts de Debian que no cambien la versión de Docker con apt upgrade
  dpkg_selections:
    name: docker-ce
    selection: hold
  when: ansible_os_family in ["Debian"]

- name: Asegurar que Docker inició, eliminar la configuración si el inicio de Docker falló y volver a intentar
  block:
    - name: Asegurar que el servicio se inicie si los paquetes de Docker ya están presentes
      service:
        name: docker
        state: started
      when: docker_task_result is not changed
  rescue:
    - debug:
        msg: "Error al iniciar Docker. Intenta eliminar configuración personalizada"
    - name: Eliminar la configuración generada por este proyecto ansiblerole
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/systemd/system/docker.service.d/http-proxy.conf
        - /etc/systemd/system/docker.service.d/docker-options.conf
        - /etc/systemd/system/docker.service.d/docker-dns.conf
        - /etc/systemd/system/docker.service.d/docker-orphan-cleanup.conf
      notify: restart docker

- name: Limpiar los controladores para poder esperar a que Docker levante
  meta: flush_handlers

- name: Establecer datos para docker_version
  command: "docker version -f '{{ '{{' }}.Client.Version{{ '}}' }}'"
  register: installed_docker_version
  changed_when: false
  check_mode: false

- name: Comprobar la versión mínima de Docker para el modo docker_dns. Necesitar al menos la versión de docker> = 1.12 para resolvconf_mode = docker_dns
  fail:
    msg: "Necesita al menos la versión de docker> = 1.12 para resolvconf_mode = docker_dns"
  when: >
        dns_mode != 'none' and
        resolvconf_mode == 'docker_dns' and
        installed_docker_version.stdout is version('1.12', '<')

# Instalar cada complemento utilizando una inclusión en bucle para simplificar el manejo de errores en la tarea incluida.
- include_tasks: docker_plugin.yml
  loop: "{{ docker_plugins }}"
  loop_control:
    loop_var: docker_plugin

- name: Establecer la configuración systemd de Docker
  import_tasks: systemd.yml

- name: Asegurar que el servicio de Docker esté iniciado y habilitado
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - docker
